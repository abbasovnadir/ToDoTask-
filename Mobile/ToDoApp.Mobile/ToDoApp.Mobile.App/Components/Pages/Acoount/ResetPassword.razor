@page "/Account/ResetPassword"
@using System.ComponentModel.DataAnnotations
@using ToDoApp.Mobile.App.Services.Concrete
@using ToDoApp.Mobile.App.Services.Interfaces
@layout EmptyLayout
@inject NavigationManager Navigation
@inject ResetPassState ResetState
@inject ICustomAuthenticationStateProvider AuthProvider


<HeadContent>
    <link rel="stylesheet" href="css/resetPassword.css" />
</HeadContent>

<div class="auth-container">
    <div class="auth-background d-none d-md-flex">
        <div class="overlay"></div>
        <div class="feature-content">
            <h2>Reset Password</h2>
            <p>Create a new password for your account</p>
        </div>
    </div>

    <div class="auth-form-container">
        <div class="auth-form">
            @* <div class="logo-container">
                <img src="/images/logo.svg" alt="Company Logo" class="logo">
            </div> *@

            <h3 class="welcome-text">Reset your password</h3>
            <p class="subtext">Please enter your new password</p>

            <EditForm Model="model" OnValidSubmit="ResetPass" class="form">
                <DataAnnotationsValidator />

                <div class="form-group">

                    <label for="newPassword">New Password</label>
                    <div class="password-input">
                        <InputText @bind-Value="model.NewPassword"
                        type="@(showNewPassword ? "text" : "password")"
                        class="form-control"
                        placeholder="Enter new password" />
                        <button type="button" class="toggle-password" @onclick="() => showNewPassword = !showNewPassword">
                            <i class="@(showNewPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => model.NewPassword)" />
                </div>

                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <div class="password-input">
                        <InputText @bind-Value="model.ConfirmPassword"
                        type="@(showConfirmPassword ? "text" : "password")"
                        class="form-control"
                        placeholder="Confirm new password" />
                        <button type="button" class="toggle-password" @onclick="() => showConfirmPassword = !showConfirmPassword">
                            <i class="@(showConfirmPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => model.ConfirmPassword)" />
                </div>

                <button type="submit" class="btn-primary" onclick="ResetPass" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status"></span>
                        <span> Resetting...</span>
                    }
                    else
                    {
                        <span>Reset Password</span>
                    }
                </button>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success">@successMessage</div>
                }
            </EditForm>

            <div class="auth-footer">
                Remembered your password? <a @onclick="GoToLogin">Sign in</a>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string Email { get; set; }

    private ResetPasswordModel model = new ResetPasswordModel();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;
    private bool showNewPassword = false;
    private bool showConfirmPassword = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    public async Task ResetPass()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            var result = await AuthProvider.SendChangePasswordEmail(new SendEmailChangePasswordDto { UserEmail = Email });
            if (!result.IsSuccess)
            {
                errorMessage = result.Message;
                return;
            }
            ResetState.Email = Email;
            ResetState.Password = model.NewPassword;

            Navigation.NavigateTo("/Account/ResetPassConfirm");

        }
        catch (Exception ex)
        {
            errorMessage = "Password reset failed: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }


    private void GoToLogin()
    {
        Navigation.NavigateTo("/Account/Login");
    }

    private class ResetPasswordModel
    {

        [Required(ErrorMessage = "New password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters")]
        public string NewPassword { get; set; }

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }
    }
}

