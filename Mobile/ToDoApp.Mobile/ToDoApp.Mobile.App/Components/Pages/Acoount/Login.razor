@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using ToDoApp.Mobile.App.Components.Layout
@using ToDoApp.Mobile.App.Services.Interfaces
@layout EmptyLayout
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using ToDoApp.Mobile.App.Models
@using ToDoApp.Mobile.App.Services.Concrete
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authenticationStateProvider
@inject IJSRuntime JSRuntime
@inject ICustomAuthenticationStateProvider AuthProvider


<HeadContent>
    <script src="js/site.js"></script>
    <link rel="stylesheet" href="css/login.css" />
</HeadContent>

<div class="login-container">
    <div class="login-background d-none d-md-flex">
        <div class="overlay"></div>
        <div class="feature-content">
            <h2>Welcome Back!</h2>
            <p>Manage your tasks efficiently with our powerful platform</p>
        </div>
    </div>

    <div class="login-form-container">
        <div class="login-form">
            <div class="logo-container">
                <img style="width:100px" src="/logo/todo.gif" />
            </div>

            <h3 class="welcome-text">Welcome</h3>
            <p class="subtext">Please sign in to continue</p>

            <EditForm Model="model" OnValidSubmit="OnSubmit" class="form">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="username">Email</label>
                    <InputText @bind-Value="model.Email" id="username"
                               class="form-control" placeholder="Enter your username or email" />
                    <ValidationMessage For="@(() => model.Email)" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <div class="password-input">
                        <InputText @bind-Value="model.Password"
                                   type="@(showPassword ? "text" : "password")"
                                   class="form-control"
                                   placeholder="Enter your password"
                                   @ref="passwordInputRef" />
                    </div>
                    <ValidationMessage For="@(() => model.Password)" />
                </div>

                <div class="form-options">
                    <div class="remember-me">
                        <InputCheckbox @bind-Value="model.RememberMe" id="rememberMe" />
                        <label for="rememberMe">Remember me</label>
                    </div>
                    <a @onclick="GoToForgotPassword" class="forgot-password" style="cursor:pointer;">Forgot password?</a>
                </div>

                <button type="submit" class="btn-login" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span> Signing in...</span>
                    }
                    else
                    {
                        <span>Sign In</span>
                    }
                </button>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }
            </EditForm>

            <div class="divider">
                <span>or</span>
            </div>

            <div class="register-link">
                Don't have an account? <a style="color: #667eea;" @onclick="GoToRegister">Sign up</a>
            </div>
        </div>
    </div>
</div>



@code {
    private LoginModel model = new LoginModel();
    private string errorMessage = "";
    private bool isLoading = false;
    private bool showPassword = false;
    private InputText passwordInputRef;

    private async Task OnSubmit()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            var loginDto = new UserForLoginDto
                {
                    Email = model.Email,
                    Password = model.Password
                };

            var result = await AuthProvider.LoginAsync(loginDto, model.RememberMe);

            if (result.IsSuccess)
            {
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while logging in: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoToRegister()
    {
        Navigation.NavigateTo("/Account/Register");
    }
    private void GoToForgotPassword()
    {
        if (!string.IsNullOrEmpty(model.Email))
        {
            Navigation.NavigateTo("/Account/ResetPassword?email=" + Uri.EscapeDataString(model.Email));
        }
        else
        {
            errorMessage = "Email is required";
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; }

        public bool RememberMe { get; set; } = true;
    }
}

<style>

</style>